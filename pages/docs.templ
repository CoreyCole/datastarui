package pages

import l "github.com/coreycole/datastarui/layouts"
import b "github.com/coreycole/datastarui/components/breadcrumb"

templ DocsPage() {
	@l.Root("docs") {
		<div class="space-y-8">
			<!-- Breadcrumb Navigation -->
			@b.Breadcrumb(b.BreadcrumbProps{}) {
				@b.BreadcrumbList(b.BreadcrumbListProps{}) {
					@b.BreadcrumbItem(b.BreadcrumbItemProps{}) {
						@b.BreadcrumbLink(b.BreadcrumbLinkProps{Href: "/"}) {
							Home
						}
					}
					@b.BreadcrumbSeparator(b.BreadcrumbSeparatorProps{})
					@b.BreadcrumbItem(b.BreadcrumbItemProps{}) {
						@b.BreadcrumbPage(b.BreadcrumbPageProps{}) {
							Documentation
						}
					}
				}
			}
			<!-- Page Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Documentation</h1>
				<p class="text-lg text-muted-foreground">
					DatastarUI component library with structured Datastar signals.
				</p>
			</div>
			<!-- Signals Documentation -->
			<div class="space-y-6">
				<div class="space-y-4">
					<h2 class="text-2xl font-semibold tracking-tight">Signal Management</h2>
					<p class="text-muted-foreground">
						DatastarUI provides a structured way to manage Datastar signals using Go structs with JSON tags. 
						This eliminates manual JSON construction and provides type-safe signal management.
					</p>
				</div>
				<div class="space-y-4">
					<h3 class="text-xl font-semibold tracking-tight">Signal Helper Methods</h3>
					<p class="text-muted-foreground mb-4">
						The SignalManager provides helper methods for creating signal references and expressions:
					</p>
					<div class="space-y-3">
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">Signal(property)</h4>
							<p class="text-sm text-muted-foreground">Returns a reference to a signal property</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">$[componentID].property</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">Toggle(property)</h4>
							<p class="text-sm text-muted-foreground">Creates a toggle expression for boolean properties</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">$[componentID].property = !$[componentID].property</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">Set(property, value)</h4>
							<p class="text-sm text-muted-foreground">Creates a set expression for any property</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">$[componentID].property = value</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">Conditional(property, trueValue, falseValue)</h4>
							<p class="text-sm text-muted-foreground">Creates conditional expressions</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">$[componentID].property ? trueValue : falseValue</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">ConditionalAction(condition, property, value)</h4>
							<p class="text-sm text-muted-foreground">Creates safe conditional actions for event handlers</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">condition ? ($[componentID].property = value) : void 0</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">ConditionalMultiAction(condition, actions...)</h4>
							<p class="text-sm text-muted-foreground">Creates safe conditional expressions with multiple actions</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">condition ? (action1, action2, ...) : void 0</p>
						</div>
					</div>
				</div>
				<div class="space-y-4">
					<h3 class="text-xl font-semibold tracking-tight">Multi-Namespace Signals</h3>
					<p class="text-muted-foreground mb-4">
						For complex components that need multiple signal namespaces, use MultiSignals and MultiSignalRef:
					</p>
					<div class="space-y-3">
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">MultiSignals(signalsMap)</h4>
							<p class="text-sm text-muted-foreground">Creates signals with multiple namespaces from a map</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">MultiSignals(signalsMap map[string]interface&#123;&#125;)</p>
						</div>
						<div class="border rounded-lg p-4 space-y-2">
							<h4 class="font-medium">MultiSignalRef(namespace, property)</h4>
							<p class="text-sm text-muted-foreground">Returns a reference to a signal property in a multi-signal context</p>
							<p class="text-sm font-mono bg-muted px-2 py-1 rounded">$namespace.property</p>
						</div>
					</div>
				</div>
				<div class="space-y-4">
					<h3 class="text-xl font-semibold tracking-tight">Benefits</h3>
					<ul class="space-y-2 text-muted-foreground">
						<li class="flex items-start space-x-2">
							<span class="text-green-500 mt-1">•</span>
							<span><strong>Type Safety:</strong> Signal structures defined with Go structs</span>
						</li>
						<li class="flex items-start space-x-2">
							<span class="text-green-500 mt-1">•</span>
							<span><strong>Maintainability:</strong> No manual JSON string construction</span>
						</li>
						<li class="flex items-start space-x-2">
							<span class="text-green-500 mt-1">•</span>
							<span><strong>IDE Support:</strong> Autocomplete and type checking</span>
						</li>
						<li class="flex items-start space-x-2">
							<span class="text-green-500 mt-1">•</span>
							<span><strong>Namespace Support:</strong> Automatic ID-based namespacing</span>
						</li>
						<li class="flex items-start space-x-2">
							<span class="text-green-500 mt-1">•</span>
							<span><strong>Consistency:</strong> Standardized approach across components</span>
						</li>
					</ul>
				</div>
			</div>
		</div>
	}
}
