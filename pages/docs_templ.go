// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.887
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import l "github.com/coreycole/datastarui/layouts"
import b "github.com/coreycole/datastarui/components/breadcrumb"

func DocsPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-8\"><!-- Breadcrumb Navigation -->")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "Home")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = b.BreadcrumbLink(b.BreadcrumbLinkProps{Href: "/"}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return nil
					})
					templ_7745c5c3_Err = b.BreadcrumbItem(b.BreadcrumbItemProps{}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = b.BreadcrumbSeparator(b.BreadcrumbSeparatorProps{}).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Var7 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Var8 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
							templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
							templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
							if !templ_7745c5c3_IsBuffer {
								defer func() {
									templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
									if templ_7745c5c3_Err == nil {
										templ_7745c5c3_Err = templ_7745c5c3_BufErr
									}
								}()
							}
							ctx = templ.InitializeContext(ctx)
							templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "Documentation")
							if templ_7745c5c3_Err != nil {
								return templ_7745c5c3_Err
							}
							return nil
						})
						templ_7745c5c3_Err = b.BreadcrumbPage(b.BreadcrumbPageProps{}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return nil
					})
					templ_7745c5c3_Err = b.BreadcrumbItem(b.BreadcrumbItemProps{}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return nil
				})
				templ_7745c5c3_Err = b.BreadcrumbList(b.BreadcrumbListProps{}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return nil
			})
			templ_7745c5c3_Err = b.Breadcrumb(b.BreadcrumbProps{}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Page Header --><div class=\"space-y-2\"><h1 class=\"text-3xl font-bold tracking-tight\">Documentation</h1><p class=\"text-lg text-muted-foreground\">DatastarUI component library with structured Datastar signals.</p></div><!-- Signals Documentation --><div class=\"space-y-6\"><div class=\"space-y-4\"><h2 class=\"text-2xl font-semibold tracking-tight\">Signal Management</h2><p class=\"text-muted-foreground\">DatastarUI provides a structured way to manage Datastar signals using Go structs with JSON tags.  This eliminates manual JSON construction and provides type-safe signal management.</p></div><div class=\"space-y-4\"><h3 class=\"text-xl font-semibold tracking-tight\">Signal Helper Methods</h3><p class=\"text-muted-foreground mb-4\">The SignalManager provides helper methods for creating signal references and expressions:</p><div class=\"space-y-3\"><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">Signal(property)</h4><p class=\"text-sm text-muted-foreground\">Returns a reference to a signal property</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">$[componentID].property</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">Toggle(property)</h4><p class=\"text-sm text-muted-foreground\">Creates a toggle expression for boolean properties</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">$[componentID].property = !$[componentID].property</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">Set(property, value)</h4><p class=\"text-sm text-muted-foreground\">Creates a set expression for any property</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">$[componentID].property = value</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">Conditional(property, trueValue, falseValue)</h4><p class=\"text-sm text-muted-foreground\">Creates conditional expressions</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">$[componentID].property ? trueValue : falseValue</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">ConditionalAction(condition, property, value)</h4><p class=\"text-sm text-muted-foreground\">Creates safe conditional actions for event handlers</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">condition ? ($[componentID].property = value) : void 0</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">ConditionalMultiAction(condition, actions...)</h4><p class=\"text-sm text-muted-foreground\">Creates safe conditional expressions with multiple actions</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">condition ? (action1, action2, ...) : void 0</p></div></div></div><div class=\"space-y-4\"><h3 class=\"text-xl font-semibold tracking-tight\">Multi-Namespace Signals</h3><p class=\"text-muted-foreground mb-4\">For complex components that need multiple signal namespaces, use MultiSignals and MultiSignalRef:</p><div class=\"space-y-3\"><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">MultiSignals(signalsMap)</h4><p class=\"text-sm text-muted-foreground\">Creates signals with multiple namespaces from a map</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">MultiSignals(signalsMap map[string]interface&#123;&#125;)</p></div><div class=\"border rounded-lg p-4 space-y-2\"><h4 class=\"font-medium\">MultiSignalRef(namespace, property)</h4><p class=\"text-sm text-muted-foreground\">Returns a reference to a signal property in a multi-signal context</p><p class=\"text-sm font-mono bg-muted px-2 py-1 rounded\">$namespace.property</p></div></div></div><div class=\"space-y-4\"><h3 class=\"text-xl font-semibold tracking-tight\">Benefits</h3><ul class=\"space-y-2 text-muted-foreground\"><li class=\"flex items-start space-x-2\"><span class=\"text-green-500 mt-1\">•</span> <span><strong>Type Safety:</strong> Signal structures defined with Go structs</span></li><li class=\"flex items-start space-x-2\"><span class=\"text-green-500 mt-1\">•</span> <span><strong>Maintainability:</strong> No manual JSON string construction</span></li><li class=\"flex items-start space-x-2\"><span class=\"text-green-500 mt-1\">•</span> <span><strong>IDE Support:</strong> Autocomplete and type checking</span></li><li class=\"flex items-start space-x-2\"><span class=\"text-green-500 mt-1\">•</span> <span><strong>Namespace Support:</strong> Automatic ID-based namespacing</span></li><li class=\"flex items-start space-x-2\"><span class=\"text-green-500 mt-1\">•</span> <span><strong>Consistency:</strong> Standardized approach across components</span></li></ul></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = l.Root("docs").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
