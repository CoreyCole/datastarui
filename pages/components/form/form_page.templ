package form

import (
	"github.com/coreycole/datastarui/components/button"
	"github.com/coreycole/datastarui/components/card"
	"github.com/coreycole/datastarui/components/form"
	"github.com/coreycole/datastarui/components/input"
	l "github.com/coreycole/datastarui/layouts"
)

templ FormPage() {
	@l.Root("components") {
		<div class="space-y-8">
			@l.ComponentPageBreadcrumbs("Form")
			<!-- Page Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Form</h1>
				<p class="text-lg text-muted-foreground">
					Building forms with validation and accessibility. Includes form fields, labels, descriptions, and error messages.
				</p>
			</div>
			<!-- Component Grid -->
			<div class="grid gap-8">
				<!-- Basic Form Example -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Basic Form
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A simple form with input validation and descriptions.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<!-- Error/Success message placeholder -->
						<div id="basic-form-errors"></div>
						@form.Form(form.FormProps{
							ID:     "basic-form",
							Action: "/form/form-page/basic-form",
							Class:  "space-y-6",
							Attributes: templ.Attributes{
								"data-indicator-fetching": "",
							},
						}) {
							@form.FormItem(form.FormItemProps{}) {
								@form.FormLabel(form.FormLabelProps{For: "username"}) {
									Username
								}
								@input.Input(input.InputProps{
									ID:          "username",
									Name:        "username",
									Placeholder: "shadcn",
								})
								@form.FormDescription(form.FormDescriptionProps{}) {
									This is your public display name.
								}
								@form.FormMessage(form.FormMessageProps{}) {
								}
							}
							<div class="flex items-center gap-2">
								@button.Button(button.ButtonProps{
									Type: "submit",
									Attributes: templ.Attributes{
										"data-attr-disabled": "$fetching",
										"data-text":          "$fetching ? 'Submitting...' : 'Submit'",
									},
								}) {
									Submit
								}
								<div class="loading loading-spinner loading-sm text-primary" data-show="$fetching"></div>
							</div>
						}
					}
				}
				<!-- Form with Validation Example -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Form with Validation
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							Demonstrates form validation with error states and messages.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<div>
							<!-- Error/Success message placeholder -->
							<div id="validation-form-errors"></div>
							@form.Form(form.FormProps{
								ID:     "validation-form",
								Action: "/form/form-page/validation-form",
								Class:  "space-y-6",
							}) {
								@form.FormItem(form.FormItemProps{}) {
									@form.FormLabel(form.FormLabelProps{For: "email"}) {
										Email
									}
									@input.Input(input.InputProps{
										ID:          "email",
										Name:        "email",
										Type:        "email",
										Placeholder: "Enter your email",
										Attributes: templ.Attributes{
											"aria-describedby": "email-description",
										},
									})
									@form.FormDescription(form.FormDescriptionProps{ID: "email-description"}) {
										We'll never share your email with anyone else.
									}
									@form.FormMessage(form.FormMessageProps{}) {
									}
								}
								@form.FormItem(form.FormItemProps{}) {
									@form.FormLabel(form.FormLabelProps{For: "password"}) {
										Password
									}
									@input.Input(input.InputProps{
										ID:          "password",
										Name:        "password",
										Type:        "password",
										Placeholder: "Enter your password",
										Attributes: templ.Attributes{
											"aria-describedby": "password-description",
										},
									})
									@form.FormDescription(form.FormDescriptionProps{ID: "password-description"}) {
										Must be at least 8 characters long.
									}
									@form.FormMessage(form.FormMessageProps{}) {
									}
								}
								<div class="flex items-center gap-2">
									@button.Button(button.ButtonProps{
										Type: "submit",
										Attributes: templ.Attributes{
											"data-indicator-fetching": "",
											"data-attr-disabled":      "$fetching",
											"data-text":               "$fetching ? 'Submitting...' : 'Submit'",
										},
									}) {
										Submit
									}
									<div class="loading loading-spinner loading-sm text-primary" data-show="$fetching"></div>
								</div>
							}
						</div>
					}
				}
				<!-- Contact Form Example -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Contact Form
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A more complex form with multiple field types and reactive validation.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<div data-signals="{contact: {name: '', email: '', subject: '', message: ''}}">
							<!-- Error/Success message placeholder -->
							<div id="contact-form-errors"></div>
							@form.Form(form.FormProps{
								ID:     "contact-form",
								Action: "/form/form-page/contact-form",
								Class:  "space-y-6",
								Attributes: templ.Attributes{
									"data-indicator-fetching": "",
								},
							}) {
								<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
									@form.FormItem(form.FormItemProps{}) {
										@form.FormLabel(form.FormLabelProps{For: "name"}) {
											Name
										}
										@input.Input(input.InputProps{
											ID:          "name",
											Name:        "name",
											Placeholder: "Your name",
											Required:    true,
											Attributes: templ.Attributes{
												"data-bind": "$contact.name",
											},
										})
									}
									@form.FormItem(form.FormItemProps{}) {
										@form.FormLabel(form.FormLabelProps{For: "contact-email"}) {
											Email
										}
										@input.Input(input.InputProps{
											ID:          "contact-email",
											Name:        "email",
											Type:        "email",
											Placeholder: "your.email@example.com",
											Required:    true,
											Attributes: templ.Attributes{
												"data-bind": "$contact.email",
											},
										})
									}
								</div>
								@form.FormItem(form.FormItemProps{}) {
									@form.FormLabel(form.FormLabelProps{For: "subject"}) {
										Subject
									}
									@input.Input(input.InputProps{
										ID:          "subject",
										Name:        "subject",
										Placeholder: "What's this about?",
										Required:    true,
										Attributes: templ.Attributes{
											"data-bind": "$contact.subject",
										},
									})
								}
								@form.FormItem(form.FormItemProps{}) {
									@form.FormLabel(form.FormLabelProps{For: "message"}) {
										Message
									}
									<textarea
										id="message"
										name="message"
										placeholder="Your message..."
										required
										rows="4"
										class="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
										data-bind="$contact.message"
									></textarea>
									@form.FormDescription(form.FormDescriptionProps{}) {
										Please provide as much detail as possible.
									}
								}
								<div class="flex gap-2 items-center">
									@button.Button(button.ButtonProps{
										Type:    "submit",
										Variant: "default",
										Attributes: templ.Attributes{
											"data-attr-disabled": "$fetching",
											"data-text":          "$fetching ? 'Sending...' : 'Send Message'",
										},
									}) {
										Send Message
									}
									@button.Button(button.ButtonProps{
										Type:    "button",
										Variant: "outline",
										Attributes: templ.Attributes{
											"data-on-click":      "$contact = {name: '', email: '', subject: '', message: ''}",
											"data-attr-disabled": "$fetching",
										},
									}) {
										Clear
									}
									<div class="loading loading-spinner loading-sm text-primary" data-show="$fetching"></div>
								</div>
							}
						</div>
					}
				}
			</div>
		</div>
	}
}
