package dialogpage

import (
	"github.com/coreycole/datastarui/components/button"
	"github.com/coreycole/datastarui/components/dialog"
	"github.com/coreycole/datastarui/components/input"
	"github.com/coreycole/datastarui/components/label"
	l "github.com/coreycole/datastarui/layouts"
)

templ DialogPage() {
	@l.Root("components") {
		<div class="space-y-10">
			<!-- Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Dialog</h1>
				<p class="text-muted-foreground">
					A modal dialog that interrupts the user with important content and expects a response using the native HTML dialog element with Datastar reactivity.
				</p>
			</div>
			<!-- Interactive Form Example with Return Values -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Interactive Form Example</h2>
				<p class="text-sm text-muted-foreground">
					This example demonstrates form submission with return values and proper state management using Datastar signals.
				</p>
				<div
					class="space-y-4 p-6 bg-muted/50 rounded-lg"
					data-signals="{formData: {name: '', email: '', result: ''}}"
				>
					<!-- Display current form data -->
					<div class="space-y-2">
						<h3 class="font-medium">Current State:</h3>
						<div class="text-sm bg-background p-3 rounded border">
							<div>Name: <span data-text="$formData.name || 'Not set'"></span></div>
							<div>Email: <span data-text="$formData.email || 'Not set'"></span></div>
							<div>Dialog Result: <span data-text="$formData.result || 'No result yet'"></span></div>
						</div>
					</div>
					@dialog.Dialog(dialog.DialogProps{ID: "form-dialog"}) {
						@dialog.DialogTrigger(dialog.DialogTriggerProps{
							DialogID: "form-dialog",
							Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2",
						}) {
							Open Form Dialog
						}
						@dialog.DialogContent(dialog.DialogContentProps{
							ID:          "form-dialog",
							Size:        "md",
							ShowOverlay: true,
						}) {
							@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
								@dialog.DialogTitle(dialog.DialogTitleProps{}) {
									User Information
								}
								@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
									Please provide your information. The form data will be reflected in the page state.
								}
							}
							<form
								method="dialog"
								data-on-submit="
									$formData.name = evt.target.name.value;
									$formData.email = evt.target.email.value;
									$formData.result = 'Form submitted successfully at ' + new Date().toLocaleTimeString();
									$form-dialog.open = false;
								"
								class="space-y-4"
							>
								<div class="space-y-2">
									@label.Label(label.LabelProps{For: "name"}) {
										Name
									}
									@input.Input(input.InputProps{
										ID:          "name",
										Name:        "name",
										Placeholder: "Enter your name",
										Required:    true,
									})
								</div>
								<div class="space-y-2">
									@label.Label(label.LabelProps{For: "email"}) {
										Email
									}
									@input.Input(input.InputProps{
										ID:          "email",
										Name:        "email",
										Type:        "email",
										Placeholder: "Enter your email",
										Required:    true,
									})
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "form-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Type:    "button",
											Variant: "outline",
										}) {
											Cancel
										}
									}
									@button.Button(button.ButtonProps{
										Type:    "submit",
										Variant: "default",
									}) {
										Submit
									}
								}
							</form>
						}
					}
				</div>
			</div>
			<!-- Event Handling Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Event Handling & Lifecycle</h2>
				<p class="text-sm text-muted-foreground">
					This example demonstrates the complete dialog event lifecycle including open, close, cancel, and escape key handling.
				</p>
				<div
					class="space-y-4 p-6 bg-muted/50 rounded-lg"
					data-signals="{events: {log: [], isOpen: false}}"
				>
					<!-- Event log display -->
					<div class="space-y-2">
						<h3 class="font-medium">Event Log:</h3>
						<div class="text-sm bg-background p-3 rounded border max-h-32 overflow-y-auto">
							<div data-show="$events.log.length === 0" class="text-gray-500 italic">
								No events yet. Try opening and closing the dialog with different methods.
							</div>
							<div data-show="$events.log.length > 0">
								<div data-text="$events.log.slice(-5).reverse().join('\n')" class="whitespace-pre-line"></div>
							</div>
						</div>
					</div>
					@dialog.Dialog(dialog.DialogProps{ID: "events-dialog"}) {
						@dialog.DialogTrigger(dialog.DialogTriggerProps{
							DialogID: "events-dialog",
							Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2",
						}) {
							Open Event Demo Dialog
						}
						@dialog.DialogContent(dialog.DialogContentProps{
							ID:          "events-dialog",
							Size:        "lg",
							ShowOverlay: true,
							Attributes: templ.Attributes{
								"data-on-cancel": "$events.log.push('‚ùå CANCEL event (ESC key) at ' + new Date().toLocaleTimeString()); $events.isOpen = false",
								"data-on-toggle": "$events.log.push('üîÑ TOGGLE event - state: ' + (evt.newState || 'unknown') + ' at ' + new Date().toLocaleTimeString()); $events.isOpen = evt.newState === 'open'",
							},
						}) {
							@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
								@dialog.DialogTitle(dialog.DialogTitleProps{}) {
									Event Handling Demo
								}
								@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
									Try different ways to close this dialog and watch the event log.
								}
							}
							<div class="space-y-4 py-4">
								<div class="bg-blue-50 p-4 rounded border border-blue-200">
									<h4 class="font-medium text-blue-900 mb-2">Dialog State:</h4>
									<div class="text-sm text-blue-800">
										<div>Open: <span data-text="$events-dialog.open ? 'Yes' : 'No'"></span></div>
									</div>
								</div>
								<div class="space-y-3">
									<h4 class="font-medium">Ways to close this dialog:</h4>
									<ul class="text-sm space-y-1 text-muted-foreground">
										<li>‚Ä¢ Press <kbd class="px-1.5 py-0.5 text-xs bg-gray-100 border rounded">ESC</kbd> key (triggers cancel event)</li>
										<li>‚Ä¢ Click the X button in the top-right</li>
										<li>‚Ä¢ Click "Just Close" button</li>
										<li>‚Ä¢ Click "Close with Value" button</li>
										<li>‚Ä¢ Submit the form below</li>
									</ul>
								</div>
								<form
									method="dialog"
									class="space-y-3"
									data-on-submit="
										$events.log.push('üìù Form submitted with value: ' + (evt.target.resultValue.value || 'empty') + ' at ' + new Date().toLocaleTimeString());
										$events-dialog.open = false;
									"
								>
									<div class="space-y-2">
										@label.Label(label.LabelProps{For: "result-value"}) {
											Form Result Value (optional)
										}
										@input.Input(input.InputProps{
											ID:          "result-value",
											Name:        "resultValue",
											Placeholder: "Enter a return value...",
										})
									</div>
									<div class="flex gap-2">
										@button.Button(button.ButtonProps{
											Type:    "submit",
											Variant: "default",
										}) {
											Submit Form
										}
									</div>
								</form>
							</div>
							@dialog.DialogFooter(dialog.DialogFooterProps{}) {
								@dialog.DialogClose(dialog.DialogCloseProps{
									DialogID: "events-dialog",
									Attributes: templ.Attributes{
										"data-on-click": "$events.log.push('üîò Close button clicked at ' + new Date().toLocaleTimeString())",
									},
								}) {
									@button.Button(button.ButtonProps{
										Variant: "outline",
									}) {
										Just Close
									}
								}
								<button
									type="button"
									class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2"
									data-on-click="
										$events.log.push('üíæ Close with custom value at ' + new Date().toLocaleTimeString());
										$events-dialog.open = false;
									"
								>
									Close with Value
								</button>
							}
						}
					}
					<!-- Additional status info -->
					<div class="text-xs text-muted-foreground">
						<p><strong>Tip:</strong> Open your browser's console to see native dialog events as well.</p>
					</div>
				</div>
			</div>
			<!-- Basic Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Basic Example</h2>
				<p class="text-sm text-muted-foreground">
					A simple dialog with form content using the native HTML dialog element.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@dialog.Dialog(dialog.DialogProps{ID: "basic-dialog"}) {
						@dialog.DialogTrigger(dialog.DialogTriggerProps{
							DialogID: "basic-dialog",
							Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2",
						}) {
							Edit Profile
						}
						@dialog.DialogContent(dialog.DialogContentProps{
							ID:          "basic-dialog",
							Size:        "lg",
							ShowOverlay: true,
						}) {
							@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
								@dialog.DialogTitle(dialog.DialogTitleProps{}) {
									Edit profile
								}
								@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
									Make changes to your profile here. Click save when you're done.
								}
							}
							<div class="grid gap-4 py-4">
								<div class="grid grid-cols-4 items-center gap-4">
									@label.Label(label.LabelProps{
										For:   "name",
										Class: "text-right",
									}) {
										Name
									}
									@input.Input(input.InputProps{
										ID:    "name",
										Value: "Pedro Duarte",
										Class: "col-span-3",
									})
								</div>
								<div class="grid grid-cols-4 items-center gap-4">
									@label.Label(label.LabelProps{
										For:   "username",
										Class: "text-right",
									}) {
										Username
									}
									@input.Input(input.InputProps{
										ID:    "username",
										Value: "@peduarte",
										Class: "col-span-3",
									})
								</div>
							</div>
							@dialog.DialogFooter(dialog.DialogFooterProps{}) {
								@button.Button(button.ButtonProps{
									Variant: "default",
								}) {
									Save changes
								}
							}
						}
					}
				</div>
			</div>
			<!-- Size Variants -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Size Variants</h2>
				<p class="text-sm text-muted-foreground">
					Different dialog sizes to fit various content types.
				</p>
				<div class="grid grid-cols-2 md:grid-cols-4 gap-4">
					<!-- Small Dialog -->
					<div class="space-y-2">
						<h3 class="text-lg font-medium">Small</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "small-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								DialogID: "small-dialog",
								Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-full",
							}) {
								Small Dialog
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "small-dialog",
								Size:        "sm",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Small Dialog
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										This is a small dialog with limited content.
									}
								}
								<div class="py-4">
									<p class="text-sm">Perfect for simple confirmations or brief messages.</p>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "small-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "outline",
											Class:   "w-full",
										}) {
											Close
										}
									}
								}
							}
						}
					</div>
					<!-- Medium Dialog -->
					<div class="space-y-2">
						<h3 class="text-lg font-medium">Medium</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "medium-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								DialogID: "medium-dialog",
								Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-full",
							}) {
								Medium Dialog
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "medium-dialog",
								Size:        "md",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Medium Dialog
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										This is a medium-sized dialog for moderate content.
									}
								}
								<div class="py-4 space-y-4">
									<p class="text-sm">Good for forms with several fields or detailed information.</p>
									@input.Input(input.InputProps{
										Placeholder: "Enter some information...",
									})
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "medium-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "outline",
											Class:   "w-full",
										}) {
											Close
										}
									}
								}
							}
						}
					</div>
					<!-- Large Dialog -->
					<div class="space-y-2">
						<h3 class="text-lg font-medium">Large</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "large-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								DialogID: "large-dialog",
								Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-full",
							}) {
								Large Dialog
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "large-dialog",
								Size:        "lg",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Large Dialog
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										This is a large dialog with extensive content options.
									}
								}
								<div class="py-4 space-y-4">
									<p class="text-sm">Ideal for complex forms, detailed views, or rich content.</p>
									<div class="grid grid-cols-2 gap-4">
										@input.Input(input.InputProps{
											Placeholder: "First field...",
										})
										@input.Input(input.InputProps{
											Placeholder: "Second field...",
										})
									</div>
									<div class="space-y-2">
										@label.Label(label.LabelProps{For: "description"}) {
											Description
										}
										<textarea
											id="description"
											class="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
											placeholder="Enter a detailed description..."
										></textarea>
									</div>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "large-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "outline",
										}) {
											Cancel
										}
									}
									@button.Button(button.ButtonProps{
										Variant: "default",
									}) {
										Save
									}
								}
							}
						}
					</div>
					<!-- Extra Large Dialog -->
					<div class="space-y-2">
						<h3 class="text-lg font-medium">Extra Large</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "xl-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								DialogID: "xl-dialog",
								Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-full",
							}) {
								XL Dialog
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "xl-dialog",
								Size:        "xl",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Extra Large Dialog
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										This is an extra large dialog for comprehensive content.
									}
								}
								<div class="py-4 space-y-6">
									<p class="text-sm">Perfect for dashboards, detailed forms, or content-heavy interfaces.</p>
									<div class="grid grid-cols-3 gap-4">
										@input.Input(input.InputProps{
											Placeholder: "Field 1...",
										})
										@input.Input(input.InputProps{
											Placeholder: "Field 2...",
										})
										@input.Input(input.InputProps{
											Placeholder: "Field 3...",
										})
									</div>
									<div class="grid grid-cols-2 gap-6">
										<div class="space-y-2">
											@label.Label(label.LabelProps{For: "notes"}) {
												Notes
											}
											<textarea
												id="notes"
												class="flex min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
												placeholder="Additional notes..."
											></textarea>
										</div>
										<div class="space-y-2">
											@label.Label(label.LabelProps{For: "comments"}) {
												Comments
											}
											<textarea
												id="comments"
												class="flex min-h-[100px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
												placeholder="Your comments..."
											></textarea>
										</div>
									</div>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "xl-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "outline",
										}) {
											Cancel
										}
									}
									@button.Button(button.ButtonProps{
										Variant: "default",
									}) {
										Save Changes
									}
								}
							}
						}
					</div>
				</div>
			</div>
			<!-- Custom Triggers -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Custom Triggers with AsChild</h2>
				<p class="text-sm text-muted-foreground">
					Using the AsChild prop to create custom trigger elements instead of standard buttons.
				</p>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6">
					<!-- Card Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Card Trigger</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "card-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								AsChild:  true,
								DialogID: "card-dialog",
							}) {
								<div class="bg-white border border-gray-200 rounded-lg p-4 cursor-pointer hover:shadow-md transition-shadow">
									<div class="flex items-center gap-3">
										<div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
											<svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
											</svg>
										</div>
										<div>
											<p class="font-medium text-sm">User Profile</p>
											<p class="text-xs text-gray-500">Click for details</p>
										</div>
									</div>
								</div>
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "card-dialog",
								Size:        "md",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										User Profile Details
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										View and edit user profile information.
									}
								}
								<div class="py-4 space-y-4">
									<div class="flex items-center gap-4">
										<div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center">
											<svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
											</svg>
										</div>
										<div>
											<h3 class="font-semibold">John Doe</h3>
											<p class="text-sm text-muted-foreground">Software Engineer</p>
											<p class="text-sm text-muted-foreground">john@example.com</p>
										</div>
									</div>
									<div class="space-y-2">
										@label.Label(label.LabelProps{For: "bio"}) {
											Bio
										}
										<textarea
											id="bio"
											class="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
											placeholder="Tell us about yourself..."
										></textarea>
									</div>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "card-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "outline",
										}) {
											Cancel
										}
									}
									@button.Button(button.ButtonProps{
										Variant: "default",
									}) {
										Save Profile
									}
								}
							}
						}
					</div>
					<!-- Image Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Image Trigger</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "image-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								AsChild:  true,
								DialogID: "image-dialog",
							}) {
								<div class="cursor-pointer hover:opacity-80 transition-opacity">
									<img class="w-full h-32 object-cover rounded-lg" src="/img/datastar-rocket.webp" alt="Datastar Logo"/>
									<p class="text-xs text-center mt-2 text-muted-foreground">Click to view details</p>
								</div>
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "image-dialog",
								Size:        "lg",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Image Details
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										Information about this image and its properties.
									}
								}
								<div class="py-4 space-y-4">
									<div class="flex justify-center">
										<img class="max-w-full h-48 object-contain rounded-lg" src="/img/datastar-rocket.webp" alt="Datastar Logo"/>
									</div>
									<div class="grid grid-cols-2 gap-4 text-sm">
										<div>
											<span class="font-medium">File Name:</span>
											<p class="text-muted-foreground">datastar-rocket.webp</p>
										</div>
										<div>
											<span class="font-medium">Format:</span>
											<p class="text-muted-foreground">WebP</p>
										</div>
										<div>
											<span class="font-medium">Description:</span>
											<p class="text-muted-foreground">Datastar framework logo</p>
										</div>
										<div>
											<span class="font-medium">Usage:</span>
											<p class="text-muted-foreground">Brand identity</p>
										</div>
									</div>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "image-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "default",
											Class:   "w-full",
										}) {
											Close
										}
									}
								}
							}
						}
					</div>
					<!-- Custom Badge Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Badge Trigger</h3>
						@dialog.Dialog(dialog.DialogProps{ID: "badge-dialog"}) {
							@dialog.DialogTrigger(dialog.DialogTriggerProps{
								AsChild:  true,
								DialogID: "badge-dialog",
							}) {
								<div class="inline-flex items-center gap-2 px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm cursor-pointer hover:bg-green-200 transition-colors">
									<div class="w-2 h-2 bg-green-600 rounded-full"></div>
									Status: Active
									<svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
									</svg>
								</div>
							}
							@dialog.DialogContent(dialog.DialogContentProps{
								ID:          "badge-dialog",
								Size:        "sm",
								ShowOverlay: true,
							}) {
								@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
									@dialog.DialogTitle(dialog.DialogTitleProps{}) {
										Status Information
									}
									@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
										Current system status and details.
									}
								}
								<div class="py-4 space-y-3">
									<div class="flex items-center justify-between">
										<span class="text-sm font-medium">Current Status:</span>
										<div class="flex items-center gap-2">
											<div class="w-2 h-2 bg-green-600 rounded-full"></div>
											<span class="text-sm text-green-600">Active</span>
										</div>
									</div>
									<div class="flex items-center justify-between">
										<span class="text-sm font-medium">Last Updated:</span>
										<span class="text-sm text-muted-foreground">2 minutes ago</span>
									</div>
									<div class="flex items-center justify-between">
										<span class="text-sm font-medium">Uptime:</span>
										<span class="text-sm text-muted-foreground">99.9%</span>
									</div>
									<div class="flex items-center justify-between">
										<span class="text-sm font-medium">Next Check:</span>
										<span class="text-sm text-muted-foreground">In 30 seconds</span>
									</div>
								</div>
								@dialog.DialogFooter(dialog.DialogFooterProps{}) {
									@dialog.DialogClose(dialog.DialogCloseProps{
										DialogID: "badge-dialog",
									}) {
										@button.Button(button.ButtonProps{
											Variant: "default",
											Class:   "w-full",
										}) {
											Refresh Status
										}
									}
								}
							}
						}
					</div>
				</div>
			</div>
			<!-- Dialog without overlay -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Dialog without Backdrop</h2>
				<p class="text-sm text-muted-foreground">
					Dialogs can be displayed without the dark backdrop overlay for less intrusive interactions.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@dialog.Dialog(dialog.DialogProps{ID: "no-overlay-dialog"}) {
						@dialog.DialogTrigger(dialog.DialogTriggerProps{
							DialogID: "no-overlay-dialog",
							Class:    "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2",
						}) {
							Open Dialog (No Backdrop)
						}
						@dialog.DialogContent(dialog.DialogContentProps{
							ID:          "no-overlay-dialog",
							Size:        "md",
							ShowOverlay: false,
						}) {
							@dialog.DialogHeader(dialog.DialogHeaderProps{}) {
								@dialog.DialogTitle(dialog.DialogTitleProps{}) {
									Quick Action
								}
								@dialog.DialogDescription(dialog.DialogDescriptionProps{}) {
									This dialog appears without a backdrop for quick, non-blocking interactions.
								}
							}
							<div class="py-4">
								<p class="text-sm">
									Perfect for tooltips, quick forms, or actions that don't require full user attention.
								</p>
							</div>
							@dialog.DialogFooter(dialog.DialogFooterProps{}) {
								@dialog.DialogClose(dialog.DialogCloseProps{
									DialogID: "no-overlay-dialog",
								}) {
									@button.Button(button.ButtonProps{
										Variant: "default",
									}) {
										Got it
									}
								}
							}
						}
					}
				</div>
			</div>
		</div>
	}
}
