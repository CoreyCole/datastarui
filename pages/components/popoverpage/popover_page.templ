package popoverpage

import (
	"github.com/coreycole/datastarui/components/button"
	"github.com/coreycole/datastarui/components/input"
	"github.com/coreycole/datastarui/components/label"
	"github.com/coreycole/datastarui/components/popover"
	l "github.com/coreycole/datastarui/layouts"
)

templ PopoverPage() {
	@l.Root("components") {
		<div class="space-y-10">
			<!-- Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Popover</h1>
				<p class="text-muted-foreground">
					Displays rich content in a portal, triggered by a button using the native Popover API.
				</p>
			</div>
			<!-- CSS Anchor Positioning Polyfill Status -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">CSS Anchor Positioning Status</h2>
				<div class="p-4 bg-muted/50 rounded-lg">
					<div id="anchor-support-status" class="text-sm mb-2"></div>
					<div id="polyfill-status" class="text-sm"></div>
					<script>
						// Check CSS Anchor Positioning support
						const anchorSupportDiv = document.getElementById('anchor-support-status');
						const polyfillDiv = document.getElementById('polyfill-status');
						
						const hasNativeSupport = "anchorName" in document.documentElement.style;
						
						function updatePolyfillStatus() {
							if (hasNativeSupport) {
								anchorSupportDiv.innerHTML = '‚úÖ Native CSS Anchor Positioning is supported in this browser.';
								anchorSupportDiv.className = 'text-sm text-green-600 mb-2';
								polyfillDiv.innerHTML = 'üìò Polyfill not needed - using native implementation.';
								polyfillDiv.className = 'text-sm text-blue-600';
							} else {
								anchorSupportDiv.innerHTML = '‚ùå Native CSS Anchor Positioning is NOT supported in this browser.';
								anchorSupportDiv.className = 'text-sm text-red-600 mb-2';
								
								if (window.CSS_ANCHOR_POLYFILL_LOADING) {
									polyfillDiv.innerHTML = 'üîß CSS Anchor Positioning polyfill is loading...';
									polyfillDiv.className = 'text-sm text-orange-600';
								} else if (window.CSS_ANCHOR_POLYFILL_LOADED) {
									polyfillDiv.innerHTML = '‚úÖ CSS Anchor Positioning polyfill is active and working!';
									polyfillDiv.className = 'text-sm text-green-600';
								} else {
									// Check again after a delay for polyfill completion
									polyfillDiv.innerHTML = 'üîß CSS Anchor Positioning polyfill loaded (anchor positioning available)';
									polyfillDiv.className = 'text-sm text-green-600';
								}
							}
						}
						
						// Initial check
						updatePolyfillStatus();
						
						// Listen for polyfill load completion
						window.addEventListener('css-anchor-polyfill-loaded', updatePolyfillStatus);
						
						// Fallback check after delay
						setTimeout(updatePolyfillStatus, 1500);
						
						// Enhanced debugging
						console.log('CSS Anchor Positioning native support:', hasNativeSupport);
						console.log('Browser:', navigator.userAgent);
						console.log('Document style has anchorName:', "anchorName" in document.documentElement.style);
						console.log('Polyfill loading flag:', window.CSS_ANCHOR_POLYFILL_LOADING);
						console.log('Polyfill loaded flag:', window.CSS_ANCHOR_POLYFILL_LOADED);
					</script>
				</div>
			</div>
			<!-- Simple Test Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Simple Component Test</h2>
				<p class="text-sm text-muted-foreground">
					A minimal test to verify popover component functionality.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@button.Button(button.ButtonProps{
						Variant: "default",
						Attributes: templ.Attributes{
							"popovertarget":       "simple-content",
							"popovertargetaction": "toggle",
						},
					}) {
						Component Popover
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID: "simple-content",
					}) {
						<p class="text-sm">Hello! This is a component-based popover.</p>
					}
				</div>
			</div>
			<!-- Basic Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Basic Example</h2>
				<p class="text-sm text-muted-foreground">
					A simple popover with form content using the native Popover API.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@popover.Popover(popover.PopoverProps{ID: "basic-popover-container"}) {
						@button.Button(button.ButtonProps{
							Variant: "outline",
							Attributes: templ.Attributes{
								"popovertarget":       "basic-content",
								"popovertargetaction": "toggle",
							},
						}) {
							Open popover
						}
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:    "basic-content",
							Class: "w-80",
						}) {
							<div class="grid gap-4">
								<div class="space-y-2">
									<h4 class="font-medium leading-none">Dimensions</h4>
									<p class="text-sm text-muted-foreground">
										Set the dimensions for the layer.
									</p>
								</div>
								<div class="grid gap-2">
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "width"}) {
											Width
										}
										@input.Input(input.InputProps{
											ID:    "width",
											Value: "100%",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "maxWidth"}) {
											Max. width
										}
										@input.Input(input.InputProps{
											ID:    "maxWidth",
											Value: "300px",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "height"}) {
											Height
										}
										@input.Input(input.InputProps{
											ID:    "height",
											Value: "25px",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "maxHeight"}) {
											Max. height
										}
										@input.Input(input.InputProps{
											ID:    "maxHeight",
											Value: "none",
											Class: "col-span-2 h-8",
										})
									</div>
								</div>
							</div>
						}
					}
				</div>
			</div>
			<!-- Anchor Positioning API Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Anchor Positioning API</h2>
				<p class="text-sm text-muted-foreground">
					Using positioning props to simplify anchor positioning without manual style attributes. 
				</p>
				<p class="text-sm text-muted-foreground">
					The <span class="text-md font-bold font-mono">Side</span> prop specifies where the popover appears relative to the trigger:
				</p>
				<ul class="text-sm text-muted-foreground ml-6 list-disc space-y-1">
					<li class="flex items-start">
						<span class="text-md font-bold font-mono w-32">Side: "top"</span>
						<span class="ml-4">popover appears above the trigger</span>
					</li>
					<li class="flex items-start">
						<span class="text-md font-bold font-mono w-32">Side: "bottom"</span>
						<span class="ml-4">popover appears below the trigger</span>
					</li>
					<li class="flex items-start">
						<span class="text-md font-bold font-mono w-32">Side: "left"</span>
						<span class="ml-4">popover appears left of the trigger</span>
					</li>
					<li class="flex items-start">
						<span class="text-md font-bold font-mono w-32">Side: "right"</span>
						<span class="ml-4">popover appears right of the trigger</span>
					</li>
				</ul>
				<div class="flex items-center justify-center min-h-[300px] bg-muted/50 rounded-lg relative">
					<div class="grid grid-cols-3 gap-8 items-center">
						<!-- Top Side -->
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								ID:         "top-side-trigger",
								PopoverID:  "top-side-content",
								AnchorName: "top-side-anchor",
								Class:      "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-32",
							}) {
								Top Side
							}
						</div>
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:         "top-side-content",
							Class:      "w-64",
							UseAnchor:  true,
							AnchorName: "top-side-anchor",
							Side:       "top",
							Align:      "center",
						}) {
							<div class="p-2">
								<h4 class="font-medium mb-2">Top Side Popover</h4>
								<p class="text-sm text-muted-foreground">This popover appears above the trigger using Side="top".</p>
							</div>
						}
						<!-- Right Side -->
						@popover.PopoverTrigger(popover.PopoverTriggerProps{
							ID:         "right-side-trigger",
							PopoverID:  "right-side-content",
							AnchorName: "right-side-anchor",
							Class:      "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-32",
						}) {
							Right Side
						}
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:         "right-side-content",
							Class:      "w-64",
							UseAnchor:  true,
							AnchorName: "right-side-anchor",
							Side:       "right",
							Align:      "center",
						}) {
							<div class="p-2">
								<h4 class="font-medium mb-2">Right Side Popover</h4>
								<p class="text-sm text-muted-foreground">This popover appears to the right of the trigger using Side="right".</p>
							</div>
						}
						<div></div>
						<!-- Left Side -->
						@popover.PopoverTrigger(popover.PopoverTriggerProps{
							ID:         "left-side-trigger",
							PopoverID:  "left-side-content",
							AnchorName: "left-side-anchor",
							Class:      "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-32",
						}) {
							Left Side
						}
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:         "left-side-content",
							Class:      "w-64",
							UseAnchor:  true,
							AnchorName: "left-side-anchor",
							Side:       "left",
							Align:      "center",
						}) {
							<div class="p-2">
								<h4 class="font-medium mb-2">Left Side Popover</h4>
								<p class="text-sm text-muted-foreground">This popover appears to the left of the trigger using Side="left".</p>
							</div>
						}
						<!-- Bottom Side -->
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								ID:         "bottom-side-trigger",
								PopoverID:  "bottom-side-content",
								AnchorName: "bottom-side-anchor",
								Class:      "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 w-32",
							}) {
								Bottom Side
							}
						</div>
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:         "bottom-side-content",
							Class:      "w-64",
							UseAnchor:  true,
							AnchorName: "bottom-side-anchor",
							Side:       "bottom",
							Align:      "center",
						}) {
							<div class="p-2">
								<h4 class="font-medium mb-2">Bottom Side Popover</h4>
								<p class="text-sm text-muted-foreground">This popover appears below the trigger using Side="bottom".</p>
							</div>
						}
					</div>
				</div>
			</div>
			<!-- Custom Trigger with AsChild Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Custom Triggers with AsChild</h2>
				<p class="text-sm text-muted-foreground">
					Using the AsChild prop to create custom trigger elements instead of standard buttons.
				</p>
				<div class="grid grid-cols-1 md:grid-cols-2 gap-8">
					<!-- Card Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Card Trigger</h3>
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								AsChild:    true,
								PopoverID:  "card-popover",
								AnchorName: "card-anchor",
							}) {
								<div class="bg-white border border-gray-200 rounded-lg p-4 w-48 cursor-pointer hover:shadow-md transition-shadow">
									<div class="flex items-center gap-3">
										<div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
											<svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
											</svg>
										</div>
										<div>
											<p class="font-medium text-sm">User Profile</p>
											<p class="text-xs text-gray-500">Click for details</p>
										</div>
									</div>
								</div>
							}
							@popover.PopoverContent(popover.PopoverContentProps{
								ID:         "card-popover",
								Class:      "w-72",
								UseAnchor:  true,
								AnchorName: "card-anchor",
								Side:       "bottom",
								Align:      "center",
							}) {
								<div class="grid gap-3">
									<div class="space-y-2">
										<h4 class="font-medium leading-none">John Doe</h4>
										<p class="text-sm text-muted-foreground">
											Software Engineer at Acme Corp
										</p>
									</div>
									<div class="flex items-center gap-4 text-sm">
										<div class="flex items-center gap-1">
											<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
											</svg>
											john@example.com
										</div>
									</div>
									<div class="flex gap-2">
										@button.Button(button.ButtonProps{
											Variant: "default",
											Class:   "flex-1 h-8 text-xs",
										}) {
											Message
										}
										@button.Button(button.ButtonProps{
											Variant: "outline",
											Class:   "flex-1 h-8 text-xs",
										}) {
											View Profile
										}
									</div>
								</div>
							}
						</div>
					</div>
					<!-- Image Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Image Trigger</h3>
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								AsChild:    true,
								PopoverID:  "image-popover",
								AnchorName: "image-anchor",
							}) {
								<img class="w-32" src="/img/datastar-rocket.webp"/>
							}
							@popover.PopoverContent(popover.PopoverContentProps{
								ID:         "image-popover",
								Class:      "w-64",
								UseAnchor:  true,
								AnchorName: "image-anchor",
								Side:       "top",
								Align:      "center",
							}) {
								<div class="grid gap-3">
									<div class="space-y-2">
										<h4 class="font-medium leading-none">Datastar Rocket</h4>
										<p class="text-sm text-muted-foreground">
											The Datastar logo representing a lightweight, fast hypermedia framework.
										</p>
									</div>
									<div class="flex flex-col gap-4 text-xs text-muted-foreground">
										<div>
											<span class="font-medium">15KB</span> Hypermedia Framework
										</div>
										<div>
											<span class="font-medium block">Dependencies:</span> CSS Anchor Polyfil for Firefox
										</div>
									</div>
									<div class="pt-2">
										<p class="text-xs text-muted-foreground">
											üöÄ Fast, lightweight, and powerful for building reactive UIs without the complexity of traditional JavaScript frameworks.
										</p>
									</div>
								</div>
							}
						</div>
					</div>
					<!-- Custom Badge Trigger -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Badge Trigger</h3>
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								AsChild:    true,
								PopoverID:  "badge-popover",
								AnchorName: "badge-anchor",
							}) {
								<div class="inline-flex items-center gap-2 px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm cursor-pointer hover:bg-green-200 transition-colors">
									<div class="w-2 h-2 bg-green-600 rounded-full"></div>
									Online Status
									<svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
									</svg>
								</div>
							}
							@popover.PopoverContent(popover.PopoverContentProps{
								ID:         "badge-popover",
								Class:      "w-56",
								UseAnchor:  true,
								AnchorName: "badge-anchor",
								Side:       "bottom",
								Align:      "center",
							}) {
								<div class="grid gap-3">
									<div class="space-y-2">
										<h4 class="font-medium leading-none">Status Details</h4>
										<p class="text-sm text-muted-foreground">
											User is currently online and available for collaboration.
										</p>
									</div>
									<div class="space-y-2 text-sm">
										<div class="flex justify-between">
											<span class="text-muted-foreground">Last seen:</span>
											<span>Now</span>
										</div>
										<div class="flex justify-between">
											<span class="text-muted-foreground">Timezone:</span>
											<span>PST (UTC-8)</span>
										</div>
										<div class="flex justify-between">
											<span class="text-muted-foreground">Available until:</span>
											<span>6:00 PM</span>
										</div>
									</div>
								</div>
							}
						</div>
					</div>
					<!-- Custom Interactive Element -->
					<div class="space-y-4">
						<h3 class="text-lg font-medium">Interactive Element</h3>
						<div class="flex justify-center">
							@popover.PopoverTrigger(popover.PopoverTriggerProps{
								AsChild:    true,
								PopoverID:  "interactive-popover",
								AnchorName: "interactive-anchor",
							}) {
								<div class="bg-white border border-dashed border-gray-300 rounded-lg p-6 w-48 text-center cursor-pointer hover:border-blue-400 hover:bg-blue-50 transition-all group">
									<div class="flex flex-col items-center gap-2">
										<div class="w-8 h-8 bg-gray-100 group-hover:bg-blue-100 rounded-full flex items-center justify-center transition-colors">
											<svg class="w-4 h-4 text-gray-600 group-hover:text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
											</svg>
										</div>
										<span class="text-sm font-medium text-gray-700 group-hover:text-blue-700">Add Item</span>
										<span class="text-xs text-gray-500">Click to see options</span>
									</div>
								</div>
							}
							@popover.PopoverContent(popover.PopoverContentProps{
								ID:         "interactive-popover",
								Class:      "w-64",
								UseAnchor:  true,
								AnchorName: "interactive-anchor",
								Side:       "top",
								Align:      "center",
							}) {
								<div class="grid gap-3">
									<div class="space-y-2">
										<h4 class="font-medium leading-none">Add New Item</h4>
										<p class="text-sm text-muted-foreground">
											Choose what type of item you'd like to create.
										</p>
									</div>
									<div class="grid gap-2">
										@button.Button(button.ButtonProps{
											Variant: "ghost",
											Class:   "justify-start h-8 text-sm",
										}) {
											üìÑ Document
										}
										@button.Button(button.ButtonProps{
											Variant: "ghost",
											Class:   "justify-start h-8 text-sm",
										}) {
											üìÅ Folder
										}
										@button.Button(button.ButtonProps{
											Variant: "ghost",
											Class:   "justify-start h-8 text-sm",
										}) {
											üñºÔ∏è Image
										}
										@button.Button(button.ButtonProps{
											Variant: "ghost",
											Class:   "justify-start h-8 text-sm",
										}) {
											üîó Link
										}
									</div>
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	}
}
