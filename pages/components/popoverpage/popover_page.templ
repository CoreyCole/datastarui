package popoverpage

import (
	"github.com/coreycole/datastarui/components/button"
	"github.com/coreycole/datastarui/components/input"
	"github.com/coreycole/datastarui/components/label"
	"github.com/coreycole/datastarui/components/popover"
	l "github.com/coreycole/datastarui/layouts"
)

templ PopoverPage() {
	@l.Root("components") {
		<div class="space-y-10">
			<!-- Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Popover</h1>
				<p class="text-muted-foreground">
					Displays rich content in a portal, triggered by a button using the native Popover API.
				</p>
			</div>
			<!-- CSS Anchor Positioning Polyfill Status -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">CSS Anchor Positioning Status</h2>
				<div class="p-4 bg-muted/50 rounded-lg">
					<div id="anchor-support-status" class="text-sm mb-2"></div>
					<div id="polyfill-status" class="text-sm"></div>
					<script>
						// Check CSS Anchor Positioning support
						const anchorSupportDiv = document.getElementById('anchor-support-status');
						const polyfillDiv = document.getElementById('polyfill-status');
						
						const hasNativeSupport = "anchorName" in document.documentElement.style;
						
						function updatePolyfillStatus() {
							if (hasNativeSupport) {
								anchorSupportDiv.innerHTML = '‚úÖ Native CSS Anchor Positioning is supported in this browser.';
								anchorSupportDiv.className = 'text-sm text-green-600 mb-2';
								polyfillDiv.innerHTML = 'üìò Polyfill not needed - using native implementation.';
								polyfillDiv.className = 'text-sm text-blue-600';
							} else {
								anchorSupportDiv.innerHTML = '‚ùå Native CSS Anchor Positioning is NOT supported in this browser.';
								anchorSupportDiv.className = 'text-sm text-red-600 mb-2';
								
								if (window.CSS_ANCHOR_POLYFILL_LOADING) {
									polyfillDiv.innerHTML = 'üîß CSS Anchor Positioning polyfill is loading...';
									polyfillDiv.className = 'text-sm text-orange-600';
								} else if (window.CSS_ANCHOR_POLYFILL_LOADED) {
									polyfillDiv.innerHTML = '‚úÖ CSS Anchor Positioning polyfill is active and working!';
									polyfillDiv.className = 'text-sm text-green-600';
								} else {
									// Check again after a delay for polyfill completion
									polyfillDiv.innerHTML = 'üîß CSS Anchor Positioning polyfill loaded (anchor positioning available)';
									polyfillDiv.className = 'text-sm text-green-600';
								}
							}
						}
						
						// Initial check
						updatePolyfillStatus();
						
						// Listen for polyfill load completion
						window.addEventListener('css-anchor-polyfill-loaded', updatePolyfillStatus);
						
						// Fallback check after delay
						setTimeout(updatePolyfillStatus, 1500);
						
						// Enhanced debugging
						console.log('CSS Anchor Positioning native support:', hasNativeSupport);
						console.log('Browser:', navigator.userAgent);
						console.log('Document style has anchorName:', "anchorName" in document.documentElement.style);
						console.log('Polyfill loading flag:', window.CSS_ANCHOR_POLYFILL_LOADING);
						console.log('Polyfill loaded flag:', window.CSS_ANCHOR_POLYFILL_LOADED);
					</script>
				</div>
			</div>
			<!-- Direct HTML Test -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Direct HTML Test</h2>
				<p class="text-sm text-muted-foreground">
					Testing with direct HTML to verify the native Popover API works.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					<button
						popovertarget="direct-popover"
						class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
						onclick="console.log('Direct button clicked')"
					>
						Direct HTML Popover
					</button>
					<div
						id="direct-popover"
						popover="auto"
						class="w-72 rounded-md border bg-white p-4 shadow-md"
						style="border: 2px solid red; background: white; color: black;"
					>
						<p>This is a direct HTML popover to test if the native API works.</p>
						<button onclick="this.parentElement.hidePopover()" class="mt-2 px-2 py-1 bg-gray-200 rounded text-sm">
							Close
						</button>
					</div>
				</div>
			</div>
			<!-- JavaScript Controlled Test -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">JavaScript Controlled Test</h2>
				<p class="text-sm text-muted-foreground">
					Testing with JavaScript control to verify functionality.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					<button
						id="js-show-button"
						class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 mr-2"
					>
						Show via JS
					</button>
					<button
						id="js-hide-button"
						class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
					>
						Hide via JS
					</button>
					<div
						id="js-popover"
						popover="manual"
						class="w-72 rounded-md border bg-white p-4 shadow-md"
						style="border: 2px solid green; background: white; color: black;"
					>
						<p>This popover is controlled via JavaScript.</p>
					</div>
					<script>
						document.getElementById('js-show-button').addEventListener('click', function() {
							console.log('JS Show button clicked');
							const popover = document.getElementById('js-popover');
							if (popover && typeof popover.showPopover === 'function') {
								popover.showPopover();
							} else {
								console.error('showPopover method not available');
							}
						});
						
						document.getElementById('js-hide-button').addEventListener('click', function() {
							console.log('JS Hide button clicked');
							const popover = document.getElementById('js-popover');
							if (popover && typeof popover.hidePopover === 'function') {
								popover.hidePopover();
							} else {
								console.error('hidePopover method not available');
							}
						});
					</script>
				</div>
			</div>
			<!-- Simple Test Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Simple Component Test</h2>
				<p class="text-sm text-muted-foreground">
					A minimal test to verify popover component functionality.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@button.Button(button.ButtonProps{
						Variant: "default",
						Attributes: templ.Attributes{
							"popovertarget":       "simple-content",
							"popovertargetaction": "toggle",
						},
					}) {
						Component Popover
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID: "simple-content",
					}) {
						<p class="text-sm">Hello! This is a component-based popover.</p>
					}
				</div>
			</div>
			<!-- Basic Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Basic Example</h2>
				<p class="text-sm text-muted-foreground">
					A simple popover with form content using the native Popover API.
				</p>
				<div class="flex items-center justify-center min-h-[200px] bg-muted/50 rounded-lg">
					@popover.Popover(popover.PopoverProps{ID: "basic-popover-container"}) {
						@button.Button(button.ButtonProps{
							Variant: "outline",
							Attributes: templ.Attributes{
								"popovertarget":       "basic-content",
								"popovertargetaction": "toggle",
							},
						}) {
							Open popover
						}
						@popover.PopoverContent(popover.PopoverContentProps{
							ID:    "basic-content",
							Class: "w-80",
						}) {
							<div class="grid gap-4">
								<div class="space-y-2">
									<h4 class="font-medium leading-none">Dimensions</h4>
									<p class="text-sm text-muted-foreground">
										Set the dimensions for the layer.
									</p>
								</div>
								<div class="grid gap-2">
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "width"}) {
											Width
										}
										@input.Input(input.InputProps{
											ID:    "width",
											Value: "100%",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "maxWidth"}) {
											Max. width
										}
										@input.Input(input.InputProps{
											ID:    "maxWidth",
											Value: "300px",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "height"}) {
											Height
										}
										@input.Input(input.InputProps{
											ID:    "height",
											Value: "25px",
											Class: "col-span-2 h-8",
										})
									</div>
									<div class="grid grid-cols-3 items-center gap-4">
										@label.Label(label.LabelProps{For: "maxHeight"}) {
											Max. height
										}
										@input.Input(input.InputProps{
											ID:    "maxHeight",
											Value: "none",
											Class: "col-span-2 h-8",
										})
									</div>
								</div>
							</div>
						}
					}
				</div>
			</div>
			<!-- Anchor Positioning Example -->
			<div class="space-y-4">
				<h2 class="text-2xl font-semibold tracking-tight">Anchor Positioning Example</h2>
				<p class="text-sm text-muted-foreground">
					Using CSS Anchor Positioning to precisely position the popover relative to its trigger.
				</p>
				<div class="flex items-center justify-center min-h-[300px] bg-muted/50 rounded-lg relative" data-signals-positioning="false">
					<div class="grid grid-cols-3 gap-8 items-center">
						<!-- Top trigger -->
						<div class="flex justify-center">
							@button.Button(button.ButtonProps{
								Variant: "outline",
								Class:   "anchor-trigger",
								Attributes: templ.Attributes{
									"popovertarget":       "anchor-top-content",
									"popovertargetaction": "toggle",
									"style":               "anchor-name: --top-anchor",
									"data-class":          "{positioning: $positioning}",
								},
							}) {
								Top Position
							}
						</div>
						<div></div>
						<div></div>
						<!-- Left trigger -->
						@button.Button(button.ButtonProps{
							Variant: "outline",
							Class:   "anchor-trigger",
							Attributes: templ.Attributes{
								"popovertarget":       "anchor-left-content",
								"popovertargetaction": "toggle",
								"style":               "anchor-name: --left-anchor",
								"data-class":          "{positioning: $positioning}",
							},
						}) {
							Left Position
						}
						<!-- Center trigger -->
						@button.Button(button.ButtonProps{
							Variant: "default",
							Class:   "anchor-trigger",
							Attributes: templ.Attributes{
								"popovertarget":       "anchor-center-content",
								"popovertargetaction": "toggle",
								"style":               "anchor-name: --center-anchor",
								"data-class":          "{positioning: $positioning}",
							},
						}) {
							Center Position
						}
						<!-- Right trigger -->
						@button.Button(button.ButtonProps{
							Variant: "outline",
							Class:   "anchor-trigger",
							Attributes: templ.Attributes{
								"popovertarget":       "anchor-right-content",
								"popovertargetaction": "toggle",
								"style":               "anchor-name: --right-anchor",
								"data-class":          "{positioning: $positioning}",
							},
						}) {
							Right Position
						}
						<div></div>
						<div></div>
						<!-- Bottom trigger -->
						<div class="flex justify-center">
							@button.Button(button.ButtonProps{
								Variant: "outline",
								Class:   "anchor-trigger",
								Attributes: templ.Attributes{
									"popovertarget":       "anchor-bottom-content",
									"popovertargetaction": "toggle",
									"style":               "anchor-name: --bottom-anchor",
									"data-class":          "{positioning: $positioning}",
								},
							}) {
								Bottom Position
							}
						</div>
					</div>
					<!-- Anchor positioned popovers -->
					@popover.PopoverContent(popover.PopoverContentProps{
						ID:    "anchor-top-content",
						Class: "w-64 anchor-positioned",
						Attributes: templ.Attributes{
							"style":      "position-anchor: --top-anchor; top: anchor(bottom); left: anchor(center); translate: -50% 8px;",
							"data-class": "{positioning: $positioning}",
						},
					}) {
						<div class="p-2">
							<h4 class="font-medium mb-2">Top Anchored</h4>
							<p class="text-sm text-muted-foreground">This popover is positioned below the top trigger using CSS anchor positioning.</p>
						</div>
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID:    "anchor-left-content",
						Class: "w-64 anchor-positioned",
						Attributes: templ.Attributes{
							"style":      "position-anchor: --left-anchor; top: anchor(center); left: anchor(right); translate: 8px -50%;",
							"data-class": "{positioning: $positioning}",
						},
					}) {
						<div class="p-2">
							<h4 class="font-medium mb-2">Left Anchored</h4>
							<p class="text-sm text-muted-foreground">This popover is positioned to the right of the left trigger.</p>
						</div>
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID:    "anchor-center-content",
						Class: "w-64 anchor-positioned",
						Attributes: templ.Attributes{
							"style":      "position-anchor: --center-anchor; top: anchor(bottom); left: anchor(center); translate: -50% 8px;",
							"data-class": "{positioning: $positioning}",
						},
					}) {
						<div class="p-2">
							<h4 class="font-medium mb-2">Center Anchored</h4>
							<p class="text-sm text-muted-foreground">This popover is centered below the main trigger button.</p>
						</div>
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID:    "anchor-right-content",
						Class: "w-64 anchor-positioned",
						Attributes: templ.Attributes{
							"style":      "position-anchor: --right-anchor; top: anchor(center); left: anchor(left); translate: -100% -50%; margin-left: -8px;",
							"data-class": "{positioning: $positioning}",
						},
					}) {
						<div class="p-2">
							<h4 class="font-medium mb-2">Right Anchored</h4>
							<p class="text-sm text-muted-foreground">This popover is positioned to the left of the right trigger.</p>
						</div>
					}
					@popover.PopoverContent(popover.PopoverContentProps{
						ID:    "anchor-bottom-content",
						Class: "w-64 anchor-positioned",
						Attributes: templ.Attributes{
							"style":      "position-anchor: --bottom-anchor; top: anchor(top); left: anchor(center); translate: -50% -100%; margin-top: -8px;",
							"data-class": "{positioning: $positioning}",
						},
					}) {
						<div class="p-2">
							<h4 class="font-medium mb-2">Bottom Anchored</h4>
							<p class="text-sm text-muted-foreground">This popover is positioned above the bottom trigger.</p>
						</div>
					}
				</div>
				<!-- Simple state management for the demo -->
				<div class="text-center">
					<button
						class="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded hover:bg-blue-200 transition-colors"
						data-on-click="$positioning = !$positioning"
					>
						Toggle Positioning State
					</button>
					<p class="text-xs text-muted-foreground mt-1">
						Click to toggle data-class example (positioning: <span data-text="$positioning"></span>)
					</p>
				</div>
			</div>
			<!-- CSS Styles for Anchor Positioning -->
			<style>
				.anchor-positioned {
					position: absolute;
					position-fallback: --fallback;
				}
				
				@position-fallback --fallback {
					@try {
						top: anchor(bottom);
						left: anchor(center);
						translate: -50% 8px;
					}
					@try {
						top: anchor(top);
						left: anchor(center);
						translate: -50% -100%;
						margin-top: -8px;
					}
					@try {
						top: anchor(center);
						left: anchor(right);
						translate: 8px -50%;
					}
					@try {
						top: anchor(center);
						left: anchor(left);
						translate: -100% -50%;
						margin-left: -8px;
					}
				}
				
				/* Data-class example styles */
				.anchor-trigger.positioning {
					box-shadow: 0 0 0 2px rgb(59 130 246 / 0.5);
				}
				
				.anchor-positioned.positioning {
					border: 2px solid rgb(59 130 246);
					background: rgb(59 130 246 / 0.05);
				}
			</style>
		</div>
	}
}
