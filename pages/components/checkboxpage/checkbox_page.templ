package checkboxpage

import (
	"github.com/coreycole/datastarui/components/button"
	"github.com/coreycole/datastarui/components/card"
	"github.com/coreycole/datastarui/components/checkbox"
	"github.com/coreycole/datastarui/components/form"
	"github.com/coreycole/datastarui/components/input"
	"github.com/coreycole/datastarui/components/label"
	l "github.com/coreycole/datastarui/layouts"
)

templ CheckboxPage() {
	@l.Root("components") {
		<div class="space-y-8">
			@l.ComponentPageBreadcrumbs("Checkbox")
			<!-- Page Header -->
			<div class="space-y-2">
				<h1 class="text-3xl font-bold tracking-tight">Checkbox</h1>
				<p class="text-lg text-muted-foreground">
					A control that allows the user to toggle between checked and not checked.
				</p>
			</div>
			<!-- Component Grid -->
			<div class="grid gap-8">
				<!-- Basic Checkbox -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Basic Checkbox
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A simple checkbox with state display.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<div class="flex items-center gap-3">
							@checkbox.Checkbox(checkbox.CheckboxProps{
								ID: "terms",
							})
							@label.Label(label.LabelProps{
								For: "terms",
							}) {
								Accept terms and conditions
							}
						</div>
						<div class="mt-2 p-3 bg-muted rounded-lg max-w-sm">
							<p class="text-sm">
								<strong>State:</strong>
								<span data-text="$terms.checked ? 'Accepted' : 'Not accepted'"></span>
							</p>
						</div>
					}
				}
				<!-- Checked by Default -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Checked by Default
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A checkbox that starts in the checked state with additional description.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<div class="flex flex-row items-start gap-3">
							@checkbox.Checkbox(checkbox.CheckboxProps{
								ID: "terms_2",
							}) {
								<div class="grid gap-2">
									@label.Label(label.LabelProps{
										For: "terms_2",
									}) {
										Accept terms and conditions
									}
									<p class="text-sm text-muted-foreground">
										You agree to our Terms of Service and Privacy Policy.
									</p>
								</div>
							}
						</div>
						<div class="mt-2 p-3 bg-muted rounded-lg max-w-sm">
							<p class="text-sm">
								<strong>State:</strong>
								<span data-text="$terms_2.checked ? 'Accepted' : 'Not accepted'"></span>
							</p>
						</div>
					}
				}
				<!-- Disabled Checkbox -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Disabled
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A checkbox that cannot be interacted with.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<div class="flex items-start gap-3">
							@checkbox.Checkbox(checkbox.CheckboxProps{
								ID:       "toggle",
								Disabled: true,
							})
							@label.Label(label.LabelProps{
								For: "toggle",
							}) {
								Enable notifications
							}
						</div>
						<div class="mt-2 p-3 bg-muted rounded-lg max-w-sm">
							<p class="text-sm">
								<strong>State:</strong>
								<span data-text="$toggle.checked ? 'Enabled' : 'Disabled'"></span>
								<span class="text-muted-foreground ml-2">(disabled - cannot be changed)</span>
							</p>
						</div>
					}
				}
				<!-- Custom Styled Checkbox -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Custom Styled
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A checkbox with custom styling and hover effects.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						@label.Label(label.LabelProps{
							Class: "max-w-sm hover:bg-accent/50 flex items-start gap-3 rounded-lg border p-3 has-[[aria-checked=true]]:border-blue-600 has-[[aria-checked=true]]:bg-blue-50 dark:has-[[aria-checked=true]]:border-blue-900 dark:has-[[aria-checked=true]]:bg-blue-950",
						}) {
							@checkbox.Checkbox(checkbox.CheckboxProps{
								ID:        "toggle_2",
								Checked:   true,
								ClassName: "data-[state=checked]:border-blue-600 max-w-sm data-[state=checked]:bg-blue-600 data-[state=checked]:text-white dark:data-[state=checked]:border-blue-700 dark:data-[state=checked]:bg-blue-700",
							})
							<div class="flex flex-col gap-2 font-normal">
								<p class="text-sm leading-none font-medium">
									Enable notifications
								</p>
								<p class="text-muted-foreground text-sm">
									You can enable or disable notifications at any time.
								</p>
							</div>
						}
						<div class="mt-2 p-3 bg-muted rounded-lg max-w-sm">
							<p class="text-sm">
								<strong>State:</strong>
								<span data-text="$toggle_2.checked ? 'Enabled' : 'Disabled'"></span>
							</p>
						</div>
					}
				}
				<!-- Multiple Checkboxes -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Multiple Checkboxes
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							Multiple checkboxes using form state management.
						}
					}
					@card.CardContent(card.CardContentProps{}) {
						<form class="space-y-4">
							<div class="space-y-3">
								<div class="flex items-center gap-3">
									@checkbox.Checkbox(checkbox.CheckboxProps{
										ID:   "newsletter",
										Name: "newsletter",
									})
									@label.Label(label.LabelProps{
										For: "newsletter",
									}) {
										Newsletter
									}
								</div>
								<div class="flex items-center gap-3">
									@checkbox.Checkbox(checkbox.CheckboxProps{
										ID:      "updates",
										Name:    "updates",
										Checked: true,
									})
									@label.Label(label.LabelProps{
										For: "updates",
									}) {
										Product updates
									}
								</div>
								<div class="flex items-center gap-3">
									@checkbox.Checkbox(checkbox.CheckboxProps{
										ID:   "marketing",
										Name: "marketing",
									})
									@label.Label(label.LabelProps{
										For: "marketing",
									}) {
										Marketing emails
									}
								</div>
							</div>
							<div class="mt-4 p-4 bg-muted rounded-lg max-w-sm">
								<p class="text-sm font-medium mb-2">Selected preferences:</p>
								<ul class="text-sm space-y-1">
									<li data-show="$newsletter.checked">✓ Newsletter</li>
									<li data-show="$updates.checked">✓ Product updates</li>
									<li data-show="$marketing.checked">✓ Marketing emails</li>
									<li data-show="!$newsletter.checked && !$updates.checked && !$marketing.checked" class="text-muted-foreground">
										None selected
									</li>
								</ul>
							</div>
						</form>
					}
				}
				<!-- Form Example -->
				@card.Card(card.CardProps{}) {
					@card.CardHeader(card.CardHeaderProps{}) {
						@card.CardTitle(card.CardTitleProps{}) {
							Form Example
						}
						@card.CardDescription(card.CardDescriptionProps{}) {
							A complete form with checkbox validation and submission.
						}
					}
					@card.CardContent(card.CardContentProps{Class: "max-w-sm"}) {
						@card.Card(card.CardProps{}) {
							@card.CardHeader(card.CardHeaderProps{}) {
								@card.CardTitle(card.CardTitleProps{}) {
									Create Account
								}
								@card.CardDescription(card.CardDescriptionProps{}) {
									Enter your information to create an account.
								}
							}
							@card.CardContent(card.CardContentProps{}) {
								<!-- Error/Success message placeholder -->
								<div id="checkbox_form_errors"></div>
								@form.Form(form.FormProps{
									ID:     "checkbox_form",
									Action: "/forms/checkbox-demo",
									Class:  "space-y-4",
									Attributes: templ.Attributes{
										"data-indicator-fetching": "",
									},
								}) {
									@form.FormItem(form.FormItemProps{}) {
										@form.FormLabel(form.FormLabelProps{For: "name"}) {
											Name
										}
										@input.Input(input.InputProps{
											ID:          "name",
											Name:        "name",
											Placeholder: "Enter your name",
											Required:    true,
										})
									}
									@form.FormItem(form.FormItemProps{}) {
										@form.FormLabel(form.FormLabelProps{For: "email"}) {
											Email
										}
										@input.Input(input.InputProps{
											ID:          "email",
											Name:        "email",
											Type:        "email",
											Placeholder: "Enter your email",
											Required:    true,
										})
									}
									@form.FormItem(form.FormItemProps{}) {
										<div class="flex items-center gap-3">
											@checkbox.Checkbox(checkbox.CheckboxProps{
												ID:       "terms_form",
												Name:     "terms_form",
												Required: true,
											})
											@form.FormLabel(form.FormLabelProps{
												For:   "terms_form",
												Class: "text-sm font-normal",
											}) {
												I agree to the 
												<a href="#" class="underline underline-offset-4 hover:text-primary">
													terms and conditions
												</a>
											}
										</div>
									}
									<div class="flex items-center gap-2">
										@button.Button(button.ButtonProps{
											Type: "submit",
											Attributes: templ.Attributes{
												"data-attr-disabled": "$fetching",
												"data-text":          "$fetching ? 'Creating...' : 'Create Account'",
											},
										}) {
											Create Account
										}
										<div class="loading loading-spinner loading-sm text-primary" data-show="$fetching"></div>
									</div>
								}
							}
						}
					}
				}
			</div>
		</div>
	}
}
