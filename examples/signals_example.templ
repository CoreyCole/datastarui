package examples

import "github.com/coreycole/datastarui/utils"

// ExampleSignals demonstrates a complex signal structure
type ExampleSignals struct {
	Loading bool   `json:"loading"`
	Count   int    `json:"count"`
	Message string `json:"message"`
	Visible bool   `json:"visible"`
	Theme   string `json:"theme"`
}

// ComplexSignalsExample shows how to use the new signals system
templ ComplexSignalsExample() {
	{{
		// Create signals with initial values
		signals := utils.Signals("example", ExampleSignals{
			Loading: false,
			Count:   0,
			Message: "Hello World",
			Visible: true,
			Theme:   "light",
		})
	}}
	<div data-signals={ signals.DataSignals } class="p-6 space-y-4">
		<h2 class="text-2xl font-bold">Signals Example</h2>
		<!-- Display current values -->
		<div class="space-y-2 mb-6">
			<h3 class="font-semibold">Current Values:</h3>
			<p>Count: <span data-text={ signals.Signal("count") }></span></p>
			<p>Message: <span data-text={ signals.Signal("message") }></span></p>
			<p>Theme: <span data-text={ signals.Signal("theme") }></span></p>
			<p>Loading: <span data-text={ signals.Signal("loading") + " ? 'Yes' : 'No'" }></span></p>
		</div>
		<!-- Conditional visibility example -->
		<div data-show={ signals.Signal("visible") } class="bg-blue-100 p-4 rounded">
			<p>This div is conditionally visible based on the 'visible' signal!</p>
		</div>
		<!-- Control buttons -->
		<div class="grid grid-cols-2 gap-4 mb-6">
			<button
				class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
				data-on-click={ signals.Set("count", signals.Signal("count")+" + 1") }
			>
				Increment Count
			</button>
			<button
				class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
				data-on-click={ signals.Set("count", "0") }
			>
				Reset Count
			</button>
			<button
				class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
				data-on-click={ signals.Toggle("visible") }
			>
				Toggle Visibility
			</button>
			<button
				class="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600"
				data-on-click={ signals.Toggle("loading") }
			>
				Toggle Loading
			</button>
		</div>
		<!-- Form inputs with two-way binding -->
		<div class="space-y-4 mb-6">
			<div>
				<label class="block text-sm font-medium mb-1">Message:</label>
				<input
					type="text"
					class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
					data-bind={ signals.Signal("message") }
				/>
			</div>
			<div>
				<label class="block text-sm font-medium mb-1">Theme:</label>
				<select
					class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
					data-bind={ signals.Signal("theme") }
				>
					<option value="light">Light</option>
					<option value="dark">Dark</option>
				</select>
			</div>
		</div>
		<!-- Loading state example -->
		<div data-show={ signals.Signal("loading") } class="text-blue-500">
			<p>Loading in progress...</p>
		</div>
		<button
			class="px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-50"
			data-attr-disabled={ signals.Signal("loading") }
			data-text={ signals.Conditional("loading", "'Processing...'", "'Process'") }
			data-on-click={ signals.Set("loading", "true") + "; setTimeout(() => " + signals.Set("loading", "false") + ", 2000)" }
		></button>
	</div>
}

// MultiNamespaceExample shows how to use multiple signal namespaces
templ MultiNamespaceExample() {
	{{
		// Create multiple signal namespaces
		signals := utils.MultiSignals(map[string]interface{}{
			"form": struct {
				Name  string `json:"name"`
				Email string `json:"email"`
			}{
				Name:  "",
				Email: "",
			},
			"ui": struct {
				ShowHelp bool   `json:"showHelp"`
				Theme    string `json:"theme"`
			}{
				ShowHelp: false,
				Theme:    "light",
			},
		})
	}}
	<div data-signals={ signals.DataSignals } class="p-6 space-y-4">
		<h2 class="text-2xl font-bold">Multi-Namespace Signals Example</h2>
		<!-- Form namespace -->
		<div class="space-y-2">
			<input
				type="text"
				placeholder="Name"
				class="block w-full px-3 py-2 border rounded"
				data-bind={ utils.MultiSignalRef("form", "name") }
			/>
			<input
				type="email"
				placeholder="Email"
				class="block w-full px-3 py-2 border rounded"
				data-bind={ utils.MultiSignalRef("form", "email") }
			/>
		</div>
		<!-- UI namespace -->
		<div>
			<button
				class="px-4 py-2 bg-blue-500 text-white rounded"
				data-on-click={ "$ui.showHelp = !$ui.showHelp" }
			>
				Toggle Help
			</button>
			<div data-show="$ui.showHelp" class="mt-2 p-2 bg-yellow-100 rounded">
				This is help text that can be toggled!
			</div>
		</div>
		<!-- Display values -->
		<div class="mt-4 p-4 bg-gray-100 rounded">
			<p>Name: <span data-text="$form.name"></span></p>
			<p>Email: <span data-text="$form.email"></span></p>
			<p>Theme: <span data-text="$ui.theme"></span></p>
		</div>
	</div>
}
