package popover

import "github.com/coreycole/datastarui/utils"

// Popover creates a popover container component
templ Popover(props PopoverProps) {
	<div
		class={ utils.TwMerge("relative", props.Class) }
	>
		{ children... }
	</div>
}

// PopoverTrigger creates a trigger button for the popover
templ PopoverTrigger(props PopoverTriggerProps) {
	if props.AsChild {
		// When AsChild is true, use Datastar to handle click events on children
		if props.AnchorName != "" {
			<div
				data-on-click="document.getElementById('{ props.PopoverID }').togglePopover()"
				style={ "display: contents; anchor-name: --" + props.AnchorName }
				class={ props.Class }
				{ props.Attributes... }
			>
				{ children... }
			</div>
		} else {
			<div
				data-on-click="document.getElementById('{ props.PopoverID }').togglePopover()"
				style="display: contents;"
				class={ props.Class }
				{ props.Attributes... }
			>
				{ children... }
			</div>
		}
	} else {
		// Default button trigger
		if props.AnchorName != "" {
			<button
				id={ props.ID }
				popovertarget={ props.PopoverID }
				popovertargetaction="toggle"
				style={ "anchor-name: --" + props.AnchorName }
				class={ props.Class }
				{ props.Attributes... }
			>
				{ children... }
			</button>
		} else {
			<button
				id={ props.ID }
				popovertarget={ props.PopoverID }
				popovertargetaction="toggle"
				class={ props.Class }
				{ props.Attributes... }
			>
				{ children... }
			</button>
		}
	}
}

// PopoverContent creates the popover content panel
templ PopoverContent(props PopoverContentProps) {
	{{
		contentClasses := PopoverContentVariants(props)

		// Generate positioning styles
		positioningStyle := ""

		if props.UseAnchor && props.AnchorName != "" {
			// Simplified positioning API
			positioningStyle = "position: absolute; position-anchor: --" + props.AnchorName + "; z-index: 50; "

			if props.Side != "" || props.Align != "" {
				sideOffset := props.SideOffset
				if sideOffset == 0 {
					sideOffset = 8 // default offset
				}
				anchorCSS := GetAnchorPosition(props.Side, props.Align, sideOffset)
				positioningStyle += anchorCSS + ";"
			}
		} else {
			// Default positioning without anchor - still need position absolute for native popover + anchor positioning
			positioningStyle = "position: absolute; z-index: 50;"
		}

		// Add anchor-positioned class if using anchor positioning
		if props.UseAnchor && props.AnchorName != "" {
			contentClasses += " anchor-positioned"
		}
	}}
	<div
		id={ props.ID }
		popover="auto"
		class={ contentClasses }
		style={ positioningStyle }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}
