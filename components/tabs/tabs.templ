package tabs

import (
	"crypto/rand"
	"fmt"
	"github.com/coreycole/datastarui/utils"
)

// TabsSignals defines the signal structure for tabs components
type TabsSignals struct {
	Active string `json:"active"`
}

// Tabs is the root container component that manages tab state
templ Tabs(props TabsProps) {
	{{
		// Generate unique ID if not provided
		tabsID := props.ID
		if tabsID == "" {
			// Generate a random ID
			b := make([]byte, 4)
			rand.Read(b)
			tabsID = fmt.Sprintf("tabs_%x", b)
		}

		// Generate CSS classes
		classes := tabsVariants(props.Class)

		// Set up the default active tab
		defaultValue := props.DefaultValue
		if defaultValue == "" {
			defaultValue = "tab1" // fallback default
		}

		// Use controlled value if provided, otherwise use default
		activeTab := props.Value
		if activeTab == "" {
			activeTab = defaultValue
		}

		// Create signals using the new structured system
		signals := utils.Signals(tabsID, TabsSignals{
			Active: activeTab,
		})
	}}
	<div
		data-slot="tabs"
		data-signals={ signals.DataSignals }
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// TabsList contains the tab triggers
templ TabsList(props TabsListProps) {
	{{
		// Generate CSS classes
		classes := tabsListVariants(props.Class)
	}}
	<div
		class={ classes }
		role="tablist"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// TabsTrigger is a clickable tab button
templ TabsTrigger(props TabsTriggerProps) {
	{{
		// Create signals manager for this tabs component
		signals := utils.Signals(props.ID, TabsSignals{})

		// Use the correct variant function that matches shadcn/ui exactly
		baseClasses := tabsTriggerVariantsBase(props.Class)

		// Create expressions using the new signals system
		signalRef := signals.Signal("active")
		clickExpr := signals.Set("active", "'"+props.Value+"'")

		// Active state classes to be applied conditionally - using Datastar object syntax
		activeClassesObj := "{'bg-background': " + signalRef + " === '" + props.Value + "', 'text-foreground': " + signalRef + " === '" + props.Value + "', 'shadow-sm': " + signalRef + " === '" + props.Value + "'}"
	}}
	<button
		type="button"
		data-slot="tabs-trigger"
		class={ baseClasses }
		data-class={ activeClassesObj }
		role="tab"
		data-value={ props.Value }
		data-on-click={ clickExpr }
		data-attr-data-state={ signalRef + " === '" + props.Value + "' ? 'active' : 'inactive'" }
		data-attr-aria-selected={ signalRef + " === '" + props.Value + "' ? 'true' : 'false'" }
		data-attr-tabindex={ signalRef + " === '" + props.Value + "' ? '0' : '-1'" }
		disabled?={ props.Disabled }
		{ props.Attributes... }
	>
		{ children... }
	</button>
}

// TabsContent displays the content for the active tab
templ TabsContent(props TabsContentProps) {
	{{
		// Create signals manager for this tabs component
		signals := utils.Signals(props.ID, TabsSignals{})

		// Generate CSS classes
		classes := tabsContentVariants(props.Class)

		// Create expressions using the new signals system
		signalRef := signals.Signal("active")
		showExpr := signalRef + " === '" + props.Value + "'"
	}}
	<div
		data-slot="tabs-content"
		class={ classes }
		role="tabpanel"
		data-value={ props.Value }
		data-show={ showExpr }
		data-attr-aria-hidden={ signalRef + " === '" + props.Value + "' ? 'false' : 'true'" }
		tabindex="0"
		{ props.Attributes... }
	>
		{ children... }
	</div>
}
