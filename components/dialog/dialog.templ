package dialog

// Dialog container - pure Datastar signal-based modal using data-show
templ Dialog(props DialogProps) {
	{{
		// Create nested signal structure: {[id]: {open: false, returnValue: null}}
		signalsJSON := "{\"" + props.ID + "\": {\"open\": false, \"returnValue\": null}}"

		// Dialog backdrop overlay
		backdropClasses := "fixed inset-0 z-50 bg-black/50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"

		// Dialog positioning classes - centered on screen
		dialogClasses := "fixed left-[50%] top-[50%] z-50 w-full max-w-lg translate-x-[-50%] translate-y-[-50%] data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95"

		// Generate the CSS classes for the inner dialog content container using our variant system
		containerClasses := DialogVariants(props)

		// Create unique backdrop click handler
		backdropClickHandler := "evt.target === evt.currentTarget && ($" + props.ID + ".open = false)"

		// ESC key handler for closing dialog
		escapeHandler := "evt.key === 'Escape' && ($" + props.ID + ".open = false)"
	}}
	<div data-signals={ signalsJSON }>
		<!-- Dialog backdrop overlay -->
		<div
			data-show={ "$" + props.ID + ".open" }
			class={ backdropClasses }
			data-on-click={ backdropClickHandler }
			data-on-keydown={ escapeHandler }
			tabindex="-1"
		>
			<!-- Dialog content container -->
			<div
				id={ props.ID }
				class={ dialogClasses }
				role="dialog"
				aria-modal="true"
				data-on-click="evt.stopPropagation()"
			>
				<div class={ containerClasses }>
					{ children... }
				</div>
			</div>
		</div>
	</div>
}

// DialogTrigger - button or element that opens the dialog using Datastar signals
templ DialogTrigger(props DialogTriggerProps) {
	{{
		// Create click handler using Datastar signals
		clickHandler := "$" + props.DialogID + ".open = true"
	}}
	if props.AsChild {
		// When AsChild is true, we apply the click handler to the child element
		<div
			data-on-click={ clickHandler }
			{ props.Attributes... }
			class={ props.Class }
		>
			{ children... }
		</div>
	} else {
		<button
			type="button"
			data-on-click={ clickHandler }
			{ props.Attributes... }
			class={ props.Class }
		>
			{ children... }
		</button>
	}
}

// DialogContent - content section of the dialog
templ DialogContent(props DialogContentProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogContentVariants(props)
	}}
	<div
		data-slot="dialog-content"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogOverlay - backdrop overlay (for styling compatibility)
templ DialogOverlay(props DialogOverlayProps) {
	<div
		id={ props.ID }
		class={ DialogOverlayVariants(props) }
		{ props.Attributes... }
	></div>
}

// DialogHeader - header section of the dialog
templ DialogHeader(props DialogHeaderProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogHeaderVariants(props)
	}}
	<div
		data-slot="dialog-header"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogFooter - footer section of the dialog
templ DialogFooter(props DialogFooterProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogFooterVariants(props)
	}}
	<div
		data-slot="dialog-footer"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogTitle - title element in the dialog header
templ DialogTitle(props DialogTitleProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogTitleVariants(props)
	}}
	<h2
		data-slot="dialog-title"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</h2>
}

// DialogDescription - description element in the dialog header
templ DialogDescription(props DialogDescriptionProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogDescriptionVariants(props)
	}}
	<p
		data-slot="dialog-description"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</p>
}

// DialogClose - button that closes the dialog using Datastar signals
templ DialogClose(props DialogCloseProps) {
	{{
		// Create click handler using Datastar signals
		closeSignal := "$" + props.DialogID + ".open = false"

		// Set return value if specified
		var clickHandler string
		if props.ReturnValue != "" {
			clickHandler = closeSignal + "; $" + props.DialogID + ".returnValue = '" + props.ReturnValue + "'"
		} else {
			clickHandler = closeSignal
		}

		// Default button classes matching the Button component design
		baseClasses := "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2"

		// Add variant-specific classes based on props.Variant (default to "default")
		variant := props.Variant
		if variant == "" {
			variant = "default"
		}

		var variantClasses string
		switch variant {
		case "destructive":
			variantClasses = "bg-destructive text-destructive-foreground hover:bg-destructive/90"
		case "outline":
			variantClasses = "border border-input bg-background text-foreground hover:bg-accent hover:text-accent-foreground"
		case "secondary":
			variantClasses = "bg-secondary text-secondary-foreground hover:bg-secondary/80"
		case "ghost":
			variantClasses = "text-foreground hover:bg-accent hover:text-accent-foreground"
		case "link":
			variantClasses = "text-primary underline-offset-4 hover:underline"
		default: // "default"
			variantClasses = "bg-primary text-primary-foreground hover:bg-primary/90"
		}

		buttonClasses := baseClasses + " " + variantClasses
		if props.Class != "" {
			buttonClasses += " " + props.Class
		}
	}}
	<button
		type="button"
		data-on-click={ clickHandler }
		{ props.Attributes... }
		class={ buttonClasses }
	>
		{ children... }
	</button>
}
