package dialog

// Dialog container - native HTML dialog element with Datastar refs and state tracking
templ Dialog(props DialogProps) {
	{{
		// Create nested signal structure: {[id]: {open: false, returnValue: null}}
		signalsJSON := "{\"" + props.ID + "\": {\"open\": false, \"returnValue\": null}}"

		// Create unique ref using dialog ID: data-ref="dialog_[id]" creates $dialog_[id] signal
		refName := "dialog_" + props.ID
		dialogAttrs := templ.Attributes{
			"data-ref": refName,
			// Remove data-show as it conflicts with native dialog behavior
		}

		// Merge with user-provided attributes
		for k, v := range props.Attributes {
			dialogAttrs[k] = v
		}

		// Add closedby attribute if specified
		if props.ClosedBy != "" {
			dialogAttrs["closedby"] = props.ClosedBy
		}

		// Add event handlers for native dialog events to sync signals
		toggleHandler := "$" + props.ID + ".open = evt.newState === 'open'"
		closeHandler := "$" + props.ID + ".open = false; $" + props.ID + ".returnValue = evt.target.returnValue"

		dialogAttrs["data-on-toggle"] = toggleHandler
		dialogAttrs["data-on-close"] = closeHandler

		// Add backdrop click handler if overlay is not disabled
		if !props.DisableOverlay {
			// Handle backdrop clicks to close modal dialogs using logical operators instead of if statement
			backdropClickHandler := "evt.target === evt.currentTarget && ($" + props.ID + ".open = false, evt.currentTarget.close('backdrop-click'))"
			dialogAttrs["data-on-click"] = backdropClickHandler
		}

		// Dialog should not have positioning classes - native dialog handles positioning
		dialogClasses := "p-0 border-0 bg-transparent"
		if props.Class != "" {
			dialogClasses += " " + props.Class
		}

		// Generate the CSS classes for the inner dialog content container using our variant system
		containerClasses := DialogVariants(props)
	}}
	<div data-signals={ signalsJSON }>
		<dialog
			id={ props.ID }
			{ dialogAttrs... }
			class={ dialogClasses }
		>
			<div class={ containerClasses }>
				{ children... }
			</div>
		</dialog>
	</div>
}

// DialogTrigger - button or element that opens the dialog using native methods
templ DialogTrigger(props DialogTriggerProps) {
	{{
		// Create click handler using document.getElementById for reliable DOM access
		var clickHandler string
		openSignal := "$" + props.DialogID + ".open = true"

		if props.Modal {
			clickHandler = openSignal + "; document.getElementById('" + props.DialogID + "').showModal()"
		} else {
			clickHandler = openSignal + "; document.getElementById('" + props.DialogID + "').show()"
		}
	}}
	if props.AsChild {
		// When AsChild is true, we apply the click handler to the child element
		<div
			data-on-click={ clickHandler }
			{ props.Attributes... }
			class={ props.Class }
		>
			{ children... }
		</div>
	} else {
		<button
			type="button"
			data-on-click={ clickHandler }
			{ props.Attributes... }
			class={ props.Class }
		>
			{ children... }
		</button>
	}
}

// DialogContent - content section of the dialog
templ DialogContent(props DialogContentProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogContentVariants(props)
	}}
	<div
		data-slot="dialog-content"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogOverlay - backdrop overlay (for styling compatibility - native dialog uses ::backdrop)
templ DialogOverlay(props DialogOverlayProps) {
	<div
		id={ props.ID }
		class={ DialogOverlayVariants(props) }
		{ props.Attributes... }
	></div>
}

// DialogHeader - header section of the dialog
templ DialogHeader(props DialogHeaderProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogHeaderVariants(props)
	}}
	<div
		data-slot="dialog-header"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogFooter - footer section of the dialog
templ DialogFooter(props DialogFooterProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogFooterVariants(props)
	}}
	<div
		data-slot="dialog-footer"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// DialogTitle - title element in the dialog header
templ DialogTitle(props DialogTitleProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogTitleVariants(props)
	}}
	<h2
		data-slot="dialog-title"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</h2>
}

// DialogDescription - description element in the dialog header
templ DialogDescription(props DialogDescriptionProps) {
	{{
		// Generate the CSS classes using our variant system
		classes := DialogDescriptionVariants(props)
	}}
	<p
		data-slot="dialog-description"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</p>
}

// DialogClose - button that closes the dialog using native close() method
templ DialogClose(props DialogCloseProps) {
	{{
		// Create click handler using document.getElementById for reliable DOM access
		closeSignal := "$" + props.DialogID + ".open = false"

		var clickHandler string
		if props.ReturnValue != "" {
			clickHandler = closeSignal + "; document.getElementById('" + props.DialogID + "').close('" + props.ReturnValue + "')"
		} else {
			clickHandler = closeSignal + "; document.getElementById('" + props.DialogID + "').close()"
		}

		// Default button classes matching the Button component design
		baseClasses := "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 h-10 px-4 py-2"

		// Add variant-specific classes based on props.Variant (default to "default")
		variant := props.Variant
		if variant == "" {
			variant = "default"
		}

		var variantClasses string
		switch variant {
		case "destructive":
			variantClasses = "bg-destructive text-destructive-foreground hover:bg-destructive/90"
		case "outline":
			variantClasses = "border border-input bg-background text-foreground hover:bg-accent hover:text-accent-foreground"
		case "secondary":
			variantClasses = "bg-secondary text-secondary-foreground hover:bg-secondary/80"
		case "ghost":
			variantClasses = "text-foreground hover:bg-accent hover:text-accent-foreground"
		case "link":
			variantClasses = "text-primary underline-offset-4 hover:underline"
		default: // "default"
			variantClasses = "bg-primary text-primary-foreground hover:bg-primary/90"
		}

		buttonClasses := baseClasses + " " + variantClasses
		if props.Class != "" {
			buttonClasses += " " + props.Class
		}
	}}
	<button
		type="button"
		data-on-click={ clickHandler }
		{ props.Attributes... }
		class={ buttonClasses }
	>
		{ children... }
	</button>
}
