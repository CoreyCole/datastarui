package form

import (
	"fmt"
	"github.com/coreycole/datastarui/components/label"
	"strings"
)

// Form wrapper component
templ Form(props FormProps) {
	{{
		// Convert form ID to valid signal name (replace hyphens with underscores)
		signalName := strings.ReplaceAll(props.ID, "-", "_")

		// Create nested signal structure: {[id]: {submitted: false, name: "", email: ""}}
		// This follows the same pattern as dialog component for consistency
		signalsJSON := "{\"" + signalName + "\": {\"submitted\": false, \"name\": \"\", \"email\": \"\"}}"

		// Set up form attributes
		var formAttrs templ.Attributes
		formAttrs = make(templ.Attributes)

		// Copy user-provided attributes first
		for k, v := range props.Attributes {
			formAttrs[k] = v
		}

		// Add form-specific attributes
		if props.ID != "" {
			formAttrs["id"] = props.ID
		}

		if props.Action != "" {
			// Check if there's a target specified in attributes
			target := ""
			if targetAttr, exists := props.Attributes["data-target"]; exists {
				target = fmt.Sprintf(", target: '%s'", targetAttr)
				// Remove data-target from attributes as we've handled it
				delete(formAttrs, "data-target")
			}
			formAttrs["data-on-submit"] = fmt.Sprintf("@post('%s', {contentType: 'form'%s})", templ.SafeURL(props.Action), target)
		}

		if props.Class != "" {
			formAttrs["class"] = props.Class
		}
	}}
	<div data-signals={ signalsJSON }>
		<form
			{ formAttrs... }
		>
			{ children... }
		</form>
	</div>
}

// FormItem component - container for form field
templ FormItem(props FormItemProps) {
	{{
		classes := formItemVariants(props.Class)
	}}
	<div
		data-slot="form-item"
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// FormLabel component - label for form field
templ FormLabel(props FormLabelProps) {
	{{
		classes := formLabelVariants(props.Class, props.HasError)
	}}
	@label.Label(label.LabelProps{
		Class: classes,
		For:   props.For,
		Attributes: templ.Attributes{
			"data-slot":  "form-label",
			"data-error": templ.Bool(props.HasError),
		},
	}) {
		{ children... }
	}
}

// FormDescription component - help text for form field
templ FormDescription(props FormDescriptionProps) {
	{{
		classes := formDescriptionVariants(props.Class)
	}}
	<p
		data-slot="form-description"
		if props.ID != "" {
			id={ props.ID }
		}
		class={ classes }
		{ props.Attributes... }
	>
		{ children... }
	</p>
}

// FormMessage component - error message for form field
templ FormMessage(props FormMessageProps) {
	if props.Message != "" {
		{{
			classes := formMessageVariants(props.Class)
		}}
		<p
			data-slot="form-message"
			if props.ID != "" {
				id={ props.ID }
			}
			class={ classes }
			{ props.Attributes... }
		>
			if props.Message != "" {
				{ props.Message }
			} else {
				{ children... }
			}
		</p>
	}
}
