package checkbox

import "github.com/coreycole/datastarui/utils"

// CheckboxSignals defines the signal structure for checkbox components
type CheckboxSignals struct {
	Checked bool `json:"checked"`
}

// Checkbox renders a checkbox input with shadcn/ui styling and internal Datastar reactivity
templ Checkbox(props CheckboxProps) {
	{{
		// Create signals using the new structured system
		signals := utils.Signals(props.ID, CheckboxSignals{
			Checked: props.Checked,
		})

		// Generate the CSS classes using the variant system
		classes := checkboxVariants(props.ClassName)

		// Create signal expressions
		signalRef := signals.Signal("checked")
		toggleExpr := signals.Toggle("checked")

		// Combine classes
		allClasses := classes
		if props.ClassName != "" {
			allClasses += " " + props.ClassName
		}
	}}
	<div data-signals={ signals.DataSignals }>
		<button
			type="button"
			id={ props.ID }
			class={ allClasses }
			role="checkbox"
			data-on-click={ toggleExpr }
			data-attr-aria-checked={ signalRef + " ? 'true' : 'false'" }
			data-attr-data-state={ signalRef + " ? 'checked' : 'unchecked'" }
			{ props.Attributes... }
		>
			<!-- Checkmark icon -->
			<svg
				xmlns="http://www.w3.org/2000/svg"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="h-4 w-4"
				data-attr-style={ signalRef + " ? 'opacity: 1' : 'opacity: 0'" }
			>
				<path d="M20 6 9 17l-5-5"></path>
			</svg>
		</button>
		<!-- Hidden input for form submission -->
		<input
			type="checkbox"
			name={ props.Name }
			class="sr-only"
			data-attr-checked={ signalRef }
			data-attr-value={ signalRef + " ? 'true' : 'false'" }
			tabindex="-1"
		/>
	</div>
}

// CheckboxIndicator renders the checkbox indicator (check mark)
templ CheckboxIndicator(props CheckboxIndicatorProps) {
	<span
		data-slot="checkbox-indicator"
		class={ checkboxIndicatorVariants(props.ClassName) }
		{ utils.MergeAttributes(props.Attributes)... }
	>
		{ children... }
	</span>
}
